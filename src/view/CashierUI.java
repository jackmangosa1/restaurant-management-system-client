/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import Service.*;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.*;
/**
 *
 * @author pc
 */
public class CashierUI extends javax.swing.JFrame {

    /**
     * Creates new form CashierUI
     */
    public CashierUI() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        addDataToTable();
        setupTableListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchCustomerInput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        dashboardButton = new javax.swing.JButton();
        menuButton = new javax.swing.JButton();
        customersButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lastNameInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        firstNameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addressInput = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuItemsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartItemsList = new javax.swing.JList<>();
        saveOrderButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        phoneNumberInput = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        dishNameInput = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dishPriceInput = new javax.swing.JTextField();
        dishQuantityInput = new javax.swing.JSpinner();
        addtemButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        registerCustomer = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        billTextArea = new javax.swing.JTextArea();
        printBillButton = new javax.swing.JButton();
        ordersButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(226, 232, 233));

        searchButton.setBackground(new java.awt.Color(245, 71, 72));
        searchButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.setBorder(null);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        homeButton.setBackground(new java.awt.Color(245, 71, 72));
        homeButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        homeButton.setForeground(new java.awt.Color(255, 255, 255));
        homeButton.setText("Home");
        homeButton.setBorder(null);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        dashboardButton.setBackground(new java.awt.Color(245, 71, 73));
        dashboardButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        dashboardButton.setText("Dashboard");
        dashboardButton.setBorder(null);
        dashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardButtonActionPerformed(evt);
            }
        });

        menuButton.setBackground(new java.awt.Color(245, 71, 73));
        menuButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        menuButton.setForeground(new java.awt.Color(255, 255, 255));
        menuButton.setText("Menu");
        menuButton.setBorder(null);
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        customersButton.setBackground(new java.awt.Color(245, 71, 73));
        customersButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        customersButton.setForeground(new java.awt.Color(255, 255, 255));
        customersButton.setText("Customers");
        customersButton.setBorder(null);
        customersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Search customer by phone no");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Lastname");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel3.setText("ORDER INFORMATION");

        addressInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressInputActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setText("Selected Dishes");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setText("Address");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("CUSTOMER INFORMATION");

        menuItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Dish ID", "Dish Name", "Dsih Price", "Dish Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menuItemsTable);

        cartItemsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(cartItemsList);

        saveOrderButton.setBackground(new java.awt.Color(245, 71, 72));
        saveOrderButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        saveOrderButton.setForeground(new java.awt.Color(255, 255, 255));
        saveOrderButton.setText("Save Order");
        saveOrderButton.setBorder(null);
        saveOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOrderButtonActionPerformed(evt);
            }
        });

        removeItemButton.setBackground(new java.awt.Color(245, 71, 72));
        removeItemButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        removeItemButton.setForeground(new java.awt.Color(255, 255, 255));
        removeItemButton.setText("Remove item");
        removeItemButton.setBorder(null);
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setText("Phone number");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel8.setText("Firstname");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setText("Dish Price");

        dishNameInput.setEditable(false);

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setText("Dish Name");

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setText("Quantity");

        dishPriceInput.setEditable(false);

        addtemButton.setBackground(new java.awt.Color(245, 71, 72));
        addtemButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        addtemButton.setForeground(new java.awt.Color(255, 255, 255));
        addtemButton.setText("Add item");
        addtemButton.setBorder(null);
        addtemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtemButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel9.setText("Dishes Available");

        registerCustomer.setBackground(new java.awt.Color(245, 71, 72));
        registerCustomer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        registerCustomer.setForeground(new java.awt.Color(255, 255, 255));
        registerCustomer.setText("Register Customer");
        registerCustomer.setBorder(null);
        registerCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerCustomerActionPerformed(evt);
            }
        });

        billTextArea.setColumns(20);
        billTextArea.setRows(5);
        jScrollPane3.setViewportView(billTextArea);

        printBillButton.setBackground(new java.awt.Color(245, 71, 72));
        printBillButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        printBillButton.setForeground(new java.awt.Color(255, 255, 255));
        printBillButton.setText("Print Bill");
        printBillButton.setBorder(null);
        printBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBillButtonActionPerformed(evt);
            }
        });

        ordersButton.setBackground(new java.awt.Color(245, 71, 73));
        ordersButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ordersButton.setForeground(new java.awt.Color(255, 255, 255));
        ordersButton.setText("Orders");
        ordersButton.setBorder(null);
        ordersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7)
                        .addComponent(jLabel6)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4)
                        .addComponent(jLabel8)
                        .addComponent(lastNameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addComponent(firstNameInput)
                        .addComponent(addressInput)
                        .addComponent(phoneNumberInput))
                    .addComponent(registerCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(saveOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addComponent(jScrollPane2))
                    .addComponent(jLabel9))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(dishNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addtemButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                        .addComponent(dishQuantityInput, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dishPriceInput, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(removeItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(printBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(293, 293, 293)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117)
                        .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(customersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(ordersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(374, 374, 374))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchCustomerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ordersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCustomerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addressInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(phoneNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel11)
                        .addGap(31, 31, 31)
                        .addComponent(dishNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dishPriceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dishQuantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addtemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registerCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(216, 216, 216)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int selectedDish;
     private void setupTableListener(){
      menuItemsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    JTable source = menuItemsTable;
                   int DishSelectedRowIndex = source.getSelectedRow();

                    if ( DishSelectedRowIndex >= 0) {
                        selectedDish = Integer.parseInt(source.getValueAt(DishSelectedRowIndex, 0).toString()); 
                        dishNameInput.setText(source.getValueAt(DishSelectedRowIndex, 1).toString());
                        dishPriceInput.setText(source.getValueAt(DishSelectedRowIndex, 2).toString());
                    } 
                }
            }
        });
    }  
     public static boolean isValidPhoneNumber(String phoneNumber) {
        String regex = "^\\+\\d{2,3}\\d{9}$";
        return phoneNumber.matches(regex);
    }
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if(searchCustomerInput.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the phone number of the customer to search", "Title", JOptionPane.WARNING_MESSAGE);
        }else if(!isValidPhoneNumber(searchCustomerInput.getText())){
            JOptionPane.showMessageDialog(this, "Phone number is not valid", "Title", JOptionPane.WARNING_MESSAGE);
        } else{
           try{
            String phoneNumber  = searchCustomerInput.getText();
            Registry theRegistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
            CustomerService  customerService = (CustomerService) theRegistry.lookup("customer");    
            Customer foundCustomer = customerService.searchCustomerByPhoneNumber(phoneNumber);

            if( foundCustomer != null){
                String firstName = foundCustomer.getFirstName();
                String lastName = foundCustomer.getLastName();
                String address = foundCustomer.getAddress();
                String telephoneNumber = foundCustomer.getTelephoneNumber();
                firstNameInput.setText(firstName);
                lastNameInput.setText(lastName);
                addressInput.setText(address);
                phoneNumberInput.setText(telephoneNumber);
                registerCustomer.setEnabled(false);
                firstNameInput.setEditable(false);
                lastNameInput.setEditable(false);
                addressInput.setEditable(false);
                phoneNumberInput.setEditable(false);

            } else{
             JOptionPane.showMessageDialog(this, "Customer not found", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
            } 
           }catch(Exception ex){
               ex.printStackTrace();
           }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
      
    }//GEN-LAST:event_homeButtonActionPerformed

    private void dashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardButtonActionPerformed
       
    }//GEN-LAST:event_dashboardButtonActionPerformed

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        MenuUI menuUI = new MenuUI();
        this.setVisible(false);
        menuUI.setVisible(true);
    }//GEN-LAST:event_menuButtonActionPerformed

    private void customersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersButtonActionPerformed
        CustomerUI customerUI = new CustomerUI();
        this.setVisible(false);
        customerUI.setVisible(true);
    }//GEN-LAST:event_customersButtonActionPerformed

    private void addressInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressInputActionPerformed
     DefaultListModel cartItemsListModel = new DefaultListModel(); 
    private double total;
    private double calculateTotal() {
    double total = 0.0;

    // Iterate through the items in the list
    for (int i = 0; i < cartItemsListModel.getSize(); i++) {
        CartItem item = (CartItem)cartItemsListModel.getElementAt(i);
        total += item.getTotalPrice();
    }

    return total;
}
    
    private void updateUI() {
    cartItemsList.setModel(cartItemsListModel);
    cartItemsList.repaint();
    total = calculateTotal();
}
    int orderId;
    private void saveOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOrderButtonActionPerformed
       if (cartItemsListModel.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Cart is empty, select at least one item", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    } 

    try {
        Registry theRegistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
        CustomerService customerService = (CustomerService) theRegistry.lookup("customer");  

        String phoneNumber = searchCustomerInput.getText();
        Customer foundCustomer = customerService.searchCustomerByPhoneNumber(phoneNumber);

        if (foundCustomer != null) {
            // Create a list to store order items
            List<OrderItem> orderItems = new ArrayList<>();

           
            Employee loggedInEmployee = SessionManager.getLoggedInEmployee();
            OrderStatusService orderStatusService = (OrderStatusService) theRegistry.lookup("orderStatus");
            OrderStatus orderStatus = orderStatusService.getOrderStatusById(1);

            if (orderStatus  == null) {
                JOptionPane.showMessageDialog(this, "Error retrieving order status 'received'", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
                  
                   Date orderDate = new Date();
                   CustomerOrder order = new CustomerOrder(foundCustomer, orderItems, orderDate, calculateTotal(), orderStatus, loggedInEmployee);
                    // Populate order items from cart items
            for (int i = 0; i < cartItemsListModel.getSize(); i++) {
                CartItem cartItem = (CartItem) cartItemsListModel.getElementAt(i);

                // Create OrderItem instance for each cart item
                OrderItem orderItem = new OrderItem();
                 
                orderItem.setOrder(order);
                orderItem.setDish(cartItem.getDish()); // Set the actual Dish entity
                orderItem.setQuantity(cartItem.getQuantity());

                orderItems.add(orderItem);
            }
       
                   CustomerOrderService orderService = (CustomerOrderService) theRegistry.lookup("order");
                   CustomerOrder newOrder = orderService.recordCustomerOrder(order);
                   if(newOrder != null){
                   orderId = newOrder.getOrderId();
                   
                   JOptionPane.showMessageDialog(this, "Order saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE); 
                   cartItemsListModel.removeAllElements();
                   } else{
                   JOptionPane.showMessageDialog(this, "Order not saved", "Input Error", JOptionPane.ERROR_MESSAGE);
                   return;
                   }
               
            
           
        } else {
                    JOptionPane.showMessageDialog(this, "Make sure you entered a customer", "Input Error", JOptionPane.ERROR_MESSAGE);
                   return;
               }
            
                     
    } catch (Exception ex) {
        ex.printStackTrace();
    }  
    }//GEN-LAST:event_saveOrderButtonActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
     int selectedIndex = cartItemsList.getSelectedIndex();

        if (selectedIndex != -1) {
           cartItemsListModel.remove(selectedIndex);
        } else {
        
           JOptionPane.showMessageDialog(this, "Please select the item to remove.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
      }
    }//GEN-LAST:event_removeItemButtonActionPerformed
   
  
    private void addtemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtemButtonActionPerformed
        if(dishNameInput.getText().trim().isEmpty()){
             JOptionPane.showMessageDialog(this, "Please select a dish from the table", "Input Error", JOptionPane.ERROR_MESSAGE);
             return;
        } 
         try{
             Registry theRegistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
        DishService dishService = (DishService) theRegistry.lookup("dish"); 
        
        int dishId = selectedDish;
        Dish dishObj =  new Dish();
        dishObj.setDishId(dishId);
        
        Dish dish = dishService.searchDish(dishObj);
   
        String dishName = dishNameInput.getText();
        double dishPrice = Double.parseDouble(dishPriceInput.getText());
        int dishQuantity = Integer.parseInt(dishQuantityInput.getValue().toString());
        
        if(dishQuantity == 0){
            JOptionPane.showMessageDialog(this, "Please make sure the quantity is not 0", "Input Error", JOptionPane.ERROR_MESSAGE);
             return;
        }
        CartItem newItem = new CartItem(dishId, dishName, dishPrice, dishQuantity, dish);
        cartItemsListModel.addElement(newItem);
        updateUI();
         } catch (Exception ex){
             ex.printStackTrace();
         }
    }//GEN-LAST:event_addtemButtonActionPerformed

     private void addDataToTable(){
           try{
        Registry theRegistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
        DishService dishService = (DishService) theRegistry.lookup("dish");
        List<Dish> dishList =  dishService.allDishes();
        DefaultTableModel dishTableModel = (DefaultTableModel) menuItemsTable.getModel();
        dishTableModel.setRowCount(0);
        
        if (dishList != null) {
            for (Dish item : dishList) {
                   
                     
                    int selectedRow = menuItemsTable.getSelectedRow();
                    if (selectedRow >= 0) {
                   
                         //String dishId =  dishTableModel.getValueAt(selectedRow, 0).toString();
                         String dishName =  dishTableModel.getValueAt(selectedRow, 1).toString();
                         String dishPrice = dishTableModel.getValueAt(selectedRow, 2).toString();
                         dishNameInput.setText(dishName);
                         dishPriceInput.setText(dishPrice);
                         
                         
                    }
 
                    dishTableModel.addRow(new Object[]{
                    item.getDishId(),
                    item.getName(),
                    item.getPrice(),
                    (item.getCategory() != null) ? item.getCategory().getCategoryName() : "",
                    
                });
      
            }
        } else {
            JOptionPane.showMessageDialog(this, "No record in the database");
        }
        
           } catch(Exception ex){
               ex.printStackTrace();
           }
    }
     
     private void generateBill(int orderId, Date orderDate) {
    StringBuilder billText = new StringBuilder();

    // Title
    billText.append("****************************\n");
    billText.append("Chepe-chepe Speed Food\n");
    billText.append("****************************\n\n");

    // Order ID and Order Date
    billText.append("Order ID: ").append(orderId).append("\n");
    
    // Format the timestamp to display only the date
    String formattedDate = new Date().toString();
    billText.append("Order Date: ").append(formattedDate).append("\n");
    
    // Separator
    billText.append("---------------------------------------------------\n");

    // Item Details
    billText.append(String.format("%-20s %-10s %-10s\n", "Item", "Quantity", "Price"));

    for (int i = 0; i < cartItemsListModel.getSize(); i++) {
        CartItem item = (CartItem) cartItemsListModel.getElementAt(i);
        String formattedPrice = String.format("FC %-10s", item.getPrice());
        billText.append(String.format("%-20s %-10s %-10s\n",
                item.getItemName(), item.getQuantity(), formattedPrice));
    }

    // Separator
    billText.append("---------------------------------------------------\n");
    billText.append("---------------------------------------------------\n");
    // Total
    String formattedTotal = String.format("FC %-10s", calculateTotal());
    billText.append(String.format("%-20s %-10s\n", "Total:", formattedTotal));

    // Separator
    billText.append("---------------------------------------------------\n");

    // Thank you message
    billText.append("THANK YOU FOR ORDERING!");

    // Display the bill in the JTextArea or any other component you have
    billTextArea.setText(billText.toString());

    // Print the bill
    printBill(billText.toString());
}


    private void printBill(String billText) {
        // Create a PrinterJob
        PrinterJob printerJob = PrinterJob.getPrinterJob();

        // Set the Printable object
        printerJob.setPrintable(new BillPrinter(billText));

        // Display print dialog (optional)
        if (printerJob.printDialog()) {
            try {
                // Start the printing process
                printerJob.print();
            } catch (PrinterException e) {
                e.printStackTrace();
            }
        }
    }

   public class BillPrinter implements Printable {
    private String billText;

    public BillPrinter(String billText) {
        this.billText = billText;
    }

    @Override
    public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
        if (pageIndex > 0) {
            return NO_SUCH_PAGE;
        }

        Graphics2D g2d = (Graphics2D) g;
        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

        // Set the font for the bill
        Font font = new Font("Monospaced", Font.PLAIN, 12);
        g2d.setFont(font);

        // Split the bill text into lines
        String[] lines = billText.split("\n");

        // Calculate the starting y-coordinate
        int y = (int) pageFormat.getImageableY() + g2d.getFontMetrics().getHeight();

        // Draw each line centered horizontally
        for (String line : lines) {
            if (line.contains("Item") || line.contains("Quantity") || line.contains("Price")) {
                // If the line contains headers, draw them centered with some spacing
                drawCenteredString(line, (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() / 2), y, g2d);
                y += 2 * g2d.getFontMetrics().getHeight(); // Add extra spacing for headers
            } else {
                // For other lines, draw them normally
                drawCenteredString(line, (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() / 2), y, g2d);
                y += g2d.getFontMetrics().getHeight();
            }
        }

        return PAGE_EXISTS;
    }

    private void drawCenteredString(String text, int x, int y, Graphics2D g2d) {
        int width = g2d.getFontMetrics().stringWidth(text);
        g2d.drawString(text, x - width / 2, y);
    }
}
  
    private void registerCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerCustomerActionPerformed
            try {
       Registry theRegistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
       CustomerService  customerService = (CustomerService) theRegistry.lookup("customer");    
       String firstName = firstNameInput.getText().trim();
       String lastName = lastNameInput.getText().trim();
       String address = addressInput.getText().trim();
       String phoneNumber = phoneNumberInput.getText().trim();

        if (firstName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the firstname!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        } else if(lastName.isEmpty()){
             JOptionPane.showMessageDialog(this, "Please fill in the lastname!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        } else if(address.isEmpty()){
             JOptionPane.showMessageDialog(this, "Please fill in the address!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        } else if(phoneNumber.isEmpty()){
             JOptionPane.showMessageDialog(this, "Please fill in the address!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        } else if(!isValidPhoneNumber(phoneNumber)){
            JOptionPane.showMessageDialog(this, "Phone number not valid!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if(customerService.isPhoneNumberExists(phoneNumber)){
            JOptionPane.showMessageDialog(this, "Phone number already exist!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else {  
          
        Customer theCustomer = new   Customer();
        theCustomer.setFirstName(firstName);
        theCustomer.setLastName(lastName);
        theCustomer.setAddress(address);
        theCustomer.setTelephoneNumber(phoneNumber);
       
        Customer ccustomerObj=  customerService.recordCustomer(theCustomer);

        if (ccustomerObj!= null) {
            //addDataToTable();
            firstNameInput.setText("");
            lastNameInput.setText("");
            addressInput.setText("");
            phoneNumberInput.setText("");
            JOptionPane.showMessageDialog(this, "Data Saved");
            
            
        } else {
            JOptionPane.showMessageDialog(this, "Data Not Saved");
        }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_registerCustomerActionPerformed

    private void printBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBillButtonActionPerformed
        if (cartItemsListModel.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Plese add the order to the cart before printing the bill", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
             generateBill(orderId, new Date());
    }//GEN-LAST:event_printBillButtonActionPerformed

    private void ordersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersButtonActionPerformed
//        OrdersForm ordersForm = new OrdersForm();
//        this.setVisible(false);
//        ordersForm.setVisible(true);
    }//GEN-LAST:event_ordersButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressInput;
    private javax.swing.JButton addtemButton;
    private javax.swing.JTextArea billTextArea;
    private javax.swing.JList<String> cartItemsList;
    private javax.swing.JButton customersButton;
    private javax.swing.JButton dashboardButton;
    private javax.swing.JTextField dishNameInput;
    private javax.swing.JTextField dishPriceInput;
    private javax.swing.JSpinner dishQuantityInput;
    private javax.swing.JTextField firstNameInput;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lastNameInput;
    private javax.swing.JButton menuButton;
    private javax.swing.JTable menuItemsTable;
    private javax.swing.JButton ordersButton;
    private javax.swing.JTextField phoneNumberInput;
    private javax.swing.JButton printBillButton;
    private javax.swing.JButton registerCustomer;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton saveOrderButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchCustomerInput;
    // End of variables declaration//GEN-END:variables
}
